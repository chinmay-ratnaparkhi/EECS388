TI ARM Assembler PC v5.1.7 Thu Dec 11 12:36:46 2014

Tools Copyright (c) 1996-2014 Texas Instruments Incorporated
../AsmComputeX.asm                                                   PAGE    1

       1                    ;;*****************************************************************************
       2                    ;;
       3                    ;;      Assembly language subroutine
       4                    ;;
       5                    ;;              Author:                 Gary J. Minden
       6                    ;;              Organization:   KU/EECS/EECS 388
       7                    ;;              Date:                   2014-04-18
       8                    ;;              Version:                1.0
       9                    ;;
      10                    ;;              Purpose:                Assembly language subroutine
      11                    ;;
      12                    ;;              Notes:
      13                    ;;
      14                    ;;*****************************************************************************
      15                    ;;
      16                    
      17                    ;;
      18                    ;;      This subroutine computes a value based on four input arguements.
      19                    ;;      The arguments are assumed to be in CPU registers R0 - R3
      20                    ;;        (AKA A1 - A4)
      21                    ;;
      22                    
      23                    ;;      Declare sections and external references
      24                    
      25                                    .global         AsmCompute                              ; Declare entry point as a glo
      26 00000000                           .text                                                           ; Program sections
      27                    
      28 00000000           AsmCompute:                                                                     ; Entry point
      29                    
      30                    ;;
      31                    ;;      Save necessary registers
      32                    ;;
      33                    ;;      Since this subroutine does not use registers other than R0 - R3,
      34                    ;;        and we do not call another subroutine, we don't need to save
      35                    ;;        any registers.
      36                    ;;
      37                    
      38                    ;;
      39                    ;;      Allocate local variables on the Stack
      40                    ;;
      41                    ;;      Since this subroutine does not have local variables,
      42                    ;;        no Stack space need be allocated.
      43                    ;;
      44                    
      45                    ;;
      46                    ;; This solves the X value and returns the result in R0
      47                    ;; CXValue = A * C & A * D & D + C | B;
      48                    ;; R0 A
      49                    ;; R1 B
      50                    ;; R2 C
      51                    ;; R3 D
      52                    ;; R4
      53                    ;; R5
      54                    ;; R6
      55                    ;; R7
TI ARM Assembler PC v5.1.7 Thu Dec 11 12:36:46 2014

Tools Copyright (c) 1996-2014 Texas Instruments Incorporated
../AsmComputeX.asm                                                   PAGE    2

      56                    
      57 00000000 F402FB00                  MUL             R4,R0,R2 ; [KEEP 32-BIT INS]
      58 00000004 F503FB00                  MUL             R5,R0,R3 ; [KEEP 32-BIT INS]
      59 00000008 189E                      ADDS    R6,R3,R2 ; [ORIG 16-BIT INS]
      60 0000000a 402C                      ANDS    R4,R4,R5 ; this is correct ; [ORIG 16-BIT INS]
      61 0000000c 4034                      ANDS    R4,R4,R6 ; this is correct ; [ORIG 16-BIT INS]
      62 0000000e 430C                      ORRS    R4,R4,R1 ; this is correct ; [ORIG 16-BIT INS]
      63                    
      64                    ;;
      65                    ;;This solves the Y value  and returns the result in R0
      66                    ;; Y =  D / A & D + C * A | D
      67                    ;;
      68                    
      69 00000010 F500FB02                  MUL             R5,R2,R0 ; [KEEP 32-BIT INS]
      70 00000014 18ED                      ADDS    R5,R5,R3 ; [ORIG 16-BIT INS]
      71 00000016 F6F0FBB3                  UDIV    R6,R3,R0 ; [KEEP 32-BIT INS]
      72 0000001a 4035                      ANDS    R5,R5,R6 ; [ORIG 16-BIT INS]
      73 0000001c 431D                      ORRS    R5,R5,R3 ; [ORIG 16-BIT INS]
      74                    
      75                    ;; Gives back X + Y value.
      76                    
      77 0000001e 1960                      ADDS    R0, R4, R5 ; [ORIG 16-BIT INS]
      78                    ;;
      79                    ;;      Return from the subroutine with the result in R0
      80                    ;;
      81 00000020 4770                      BX                      LR                              ; Branch to the program addres
      82                                    .end

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 14 (77%)
Number of Thumb2 ins encoded as Thumb2 = 4 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 5


No Assembly Errors, No Assembly Warnings
